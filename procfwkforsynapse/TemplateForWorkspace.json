{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "procfwkforsynapse"
		},
		"procfwkforsynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'procfwkforsynapse-WorkspaceDefaultSqlServer'"
		},
		"FrameworkFunctions_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://frameworksupportfunctions.azurewebsites.net"
		},
		"Keys_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://FrameworkKeys.vault.azure.net/"
		},
		"SupportDatabase_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "FrameworkMetadataDev"
		},
		"procfwkforsynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://frameworkdatalake01.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Check For Running Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "For a given pipeline and optional batch name establish if a pipeline run is already in progress. Throw an exception if it it.",
				"activities": [
					{
						"name": "Filter Running Pipelines",
						"description": "Filter the pipeline runs results for pipelines that exclude the current triggered run and that are currently running (in progress or queued).",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Switch For Orchestrator Type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('PipelineRuns')",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(not(equals(item().runId,pipeline().parameters.ThisRunId)),or(equals(item().status,'InProgress'),equals(item().status,'Queued')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Framework Orchestrator Details",
						"description": "Using the metadata orchestrators return details about the resource running the framework pipelines.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[procfwk].[GetFrameworkOrchestratorDetails]",
								"storedProcedureParameters": {
									"CallingOrchestratorName": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Query Run Days Value",
						"description": "Using the metadata properties table return the run days value to provide the API request with a date range for pipeline executions.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[procfwk].[GetPropertyValue]",
								"storedProcedureParameters": {
									"PropertyName": {
										"type": "String",
										"value": "PreviousPipelineRunsQueryRange"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Pipeline Is Running",
						"description": "If the running pipeline count is greater than or equal to one.\nTrue = raise an exception.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Using Batch Executions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(int(variables('RunCount')),1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Throw Exception - Pipeline Running",
									"description": "Using the utils pipeline raise an exception to stop the new trigger while a run is already in progress.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Throw Exception",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Message": {
												"value": "@concat('Provided pipeline name (',pipeline().parameters.PipelineName,') still has a run in progress or queued given the query range parameters set in the properties table.')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Execution Batch Status",
						"description": "Using the metadata properties table return the flag to indicate if batch execution setting are enabled or disabled.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[procfwk].[GetPropertyValue]",
								"storedProcedureParameters": {
									"PropertyName": {
										"type": "String",
										"value": "UseExecutionBatches"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Using Batch Executions",
						"description": "True = batch executions are enabled.\nFalse = batch execution are disabled.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Execution Batch Status",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filter Running Pipelines",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Execution Batch Status').output.firstRow.PropertyValue,string(1))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set Run Count Without Batch",
									"description": "Set the pipelines running count variable to be tested later.",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RunCount",
										"value": {
											"value": "@string(activity('Filter Running Pipelines').output.FilteredItemsCount)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Filter for Batch Name",
									"description": "Further filter the return pipeline runs for any running pipelines with the same batch name value.",
									"type": "Filter",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('Filter Running Pipelines').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().parameters.BatchName,pipeline().parameters.BatchName)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Run Count for Batch",
									"description": "Set the resulting pipeline running count variable to be tested later.",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Filter for Batch Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RunCount",
										"value": {
											"value": "@string(activity('Filter for Batch Name').output.FilteredItemsCount)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set Subscription Id",
						"description": "Set the subscription Id value to a local variable for use in various downstream activities.",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Framework Orchestrator Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SubscriptionId",
							"value": {
								"value": "@activity('Get Framework Orchestrator Details').output.firstRow.SubscriptionId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Resource Group Name",
						"description": "Set the resource group name value to a local variable for use in various downstream activities.",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Framework Orchestrator Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ResourceGroupName",
							"value": {
								"value": "@activity('Get Framework Orchestrator Details').output.firstRow.ResourceGroupName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Orchestrator Type",
						"description": "Set the orchestrator type value to a local variable for use in various downstream activities.",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Framework Orchestrator Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "OrchestratorType",
							"value": {
								"value": "@toUpper(activity('Get Framework Orchestrator Details').output.firstRow.OrchestratorType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Switch For Orchestrator Type",
						"description": "Switch and handle requests for both Azure Data Factory (ADF) and Azure Synapse Analytics (SYN).",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set Orchestrator Type",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Query Run Days",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Resource Group Name",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Subscription Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('OrchestratorType')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "ADF",
									"activities": [
										{
											"name": "Check for Valid ADF Pipeline Name",
											"description": "Use the Azure Management API to return and establish if the framework pipeline exists in the target Data Factory instance, including being deployed.",
											"type": "WebActivity",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": {
													"value": "https://management.azure.com/subscriptions/@{variables('SubscriptionId')}/resourceGroups/@{variables('ResourceGroupName')}/providers/Microsoft.DataFactory/factories/@{pipeline().DataFactory}/pipelines/@{pipeline().parameters.PipelineName}?api-version=2018-06-01",
													"type": "Expression"
												},
												"method": "GET",
												"headers": {},
												"authentication": {
													"type": "MSI",
													"resource": "https://management.core.windows.net/"
												}
											}
										},
										{
											"name": "Get ADF Pipeline Runs",
											"description": "Use the Azure Management API to return a list of data factory pipeline runs within the given time window.",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Check for Valid ADF Pipeline Name",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": {
													"value": "https://management.azure.com/subscriptions/@{variables('SubscriptionId')}/resourceGroups/@{variables('ResourceGroupName')}/providers/Microsoft.DataFactory/factories/@{pipeline().DataFactory}/queryPipelineRuns?api-version=2018-06-01",
													"type": "Expression"
												},
												"method": "POST",
												"headers": {},
												"body": {
													"value": "{\n  \"lastUpdatedAfter\": \"@{adddays(utcnow(),int(variables('QueryRunDays')))}\",\n  \"lastUpdatedBefore\": \"@{utcnow()}\",\n  \"filters\": [\n    {\n      \"operand\": \"PipelineName\",\n      \"operator\": \"Equals\",\n      \"values\": [\n        \"@{pipeline().parameters.PipelineName}\"\n      ]\n    }\n  ]\n}",
													"type": "Expression"
												},
												"authentication": {
													"type": "MSI",
													"resource": "https://management.core.windows.net/"
												}
											}
										},
										{
											"name": "Set ADF Runs Output",
											"description": "Set output to local array for use in downstream filtering and pipeline checks. Use the same array output for both switch cases.",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get ADF Pipeline Runs",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "PipelineRuns",
												"value": {
													"value": "@activity('Get ADF Pipeline Runs').output.value",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "SYN",
									"activities": [
										{
											"name": "Check for Valid SYN Pipeline Name",
											"description": "Use the Azure Management API to return and establish if the framework pipeline exists in the target Synapse instance, including being deployed.\n\nSee: https://docs.microsoft.com/en-us/rest/api/synapse/data-plane/pipeline/getpipeline",
											"type": "WebActivity",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": {
													"value": "https://@{pipeline().DataFactory}.dev.azuresynapse.net/pipelines/@{pipeline().parameters.PipelineName}?api-version=2019-06-01-preview",
													"type": "Expression"
												},
												"method": "GET",
												"headers": {},
												"authentication": {
													"type": "MSI",
													"resource": "https://management.core.windows.net/"
												}
											}
										},
										{
											"name": "Get SYN Pipeline Runs",
											"description": "Use the Azure Management API to return a list of synapse pipeline runs within the given time window.\n\nSee: https://docs.microsoft.com/en-us/rest/api/synapse/data-plane/pipelinerun/querypipelinerunsbyworkspace",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Check for Valid SYN Pipeline Name",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": {
													"value": "https://@{pipeline().DataFactory}.dev.azuresynapse.net/queryPipelineRuns?api-version=2019-06-01-preview",
													"type": "Expression"
												},
												"method": "POST",
												"headers": {},
												"body": {
													"value": "{\n  \"lastUpdatedAfter\": \"@{adddays(utcnow(),int(variables('QueryRunDays')))}\",\n  \"lastUpdatedBefore\": \"@{utcnow()}\",\n  \"filters\": [\n    {\n      \"operand\": \"PipelineName\",\n      \"operator\": \"Equals\",\n      \"values\": [\n        \"@{pipeline().parameters.PipelineName}\"\n      ]\n    }\n  ]\n}",
													"type": "Expression"
												},
												"authentication": {
													"type": "MSI",
													"resource": "https://management.core.windows.net/"
												}
											}
										},
										{
											"name": "Set SYN Runs Output",
											"description": "Set output to local array for use in downstream filtering and pipeline checks. Use the same array output for both switch cases.",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get SYN Pipeline Runs",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "PipelineRuns",
												"value": {
													"value": "@activity('Get SYN Pipeline Runs').output.value",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Throw Exception Invalid Orchestrator Type",
									"description": "Throw exception if switch cases are not met.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Throw Exception",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Message": "Invalid orchestrator type provided. Unable to check pipeline running state."
										}
									}
								}
							]
						}
					},
					{
						"name": "Set Query Run Days",
						"description": "Set the query run days value to a local variable for use in various downstream activities.",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Query Run Days Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "QueryRunDays",
							"value": {
								"value": "@activity('Get Query Run Days Value').output.firstRow.PropertyValue",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"BatchName": {
						"type": "string",
						"defaultValue": "NotUsed"
					},
					"PipelineName": {
						"type": "string"
					},
					"ThisRunId": {
						"type": "string"
					}
				},
				"variables": {
					"SubscriptionId": {
						"type": "String"
					},
					"RunCount": {
						"type": "String"
					},
					"ResourceGroupName": {
						"type": "String"
					},
					"OrchestratorType": {
						"type": "String"
					},
					"QueryRunDays": {
						"type": "String"
					},
					"PipelineRuns": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "_ProcFwk/_ProcFwkUtils"
				},
				"annotations": [
					"procfwk",
					"Utils"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/GetSetMetadata')]",
				"[concat(variables('workspaceId'), '/pipelines/Throw Exception')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Email Sender')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Provide a simple abstract over the send email function with request body item exposed as pipeline parameters.",
				"activities": [
					{
						"name": "Send Email",
						"description": "Use an Azure Function to perform an SMTP client email send operation.",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "SendEmail",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"emailRecipients\": \"@{pipeline().parameters.Recipients}\",\n\"emailCcRecipients\": \"@{pipeline().parameters.CcRecipients}\",\n\"emailBccRecipients\": \"@{pipeline().parameters.BccRecipients}\",\n\"emailSubject\": \"@{pipeline().parameters.Subject}\",\n\"emailBody\": \"@{pipeline().parameters.Body}\",\n\"emailImportance\": \"@{pipeline().parameters.Importance}\"\n}",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "FrameworkFunctions",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"Recipients": {
						"type": "string"
					},
					"CcRecipients": {
						"type": "string"
					},
					"BccRecipients": {
						"type": "string"
					},
					"Subject": {
						"type": "string"
					},
					"Body": {
						"type": "string"
					},
					"Importance": {
						"type": "string"
					}
				},
				"folder": {
					"name": "_ProcFwk/_ProcFwkUtils"
				},
				"annotations": [
					"procfwk",
					"Utils"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/FrameworkFunctions')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Intentional Error')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait1",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Raise Errors or Not",
						"description": "Framework development worker simulator.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.RaiseErrors,'true')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Call Fail Procedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[FailProcedure]",
										"storedProcedureParameters": {
											"RaiseError": {
												"value": {
													"value": "@pipeline().parameters.RaiseErrors",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"RaiseErrors": {
						"type": "string",
						"defaultValue": "false"
					},
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SupportDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Throw Exception')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Provide a simple way of throwing an exception within Data Factory using TSQL error handling.",
				"activities": [
					{
						"name": "Raise Error",
						"description": "Using a SQL database to raise an error/exception but wrapped up as a data factory pipeline. Error message information exposed as a pipeline parameter.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "RAISERROR('@{pipeline().parameters.Message}',16,1);",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"Message": {
						"type": "string"
					}
				},
				"folder": {
					"name": "_ProcFwk/_ProcFwkUtils"
				},
				"annotations": [
					"procfwk",
					"Utils"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/GetSetMetadata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wait 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait1",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wait 10')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait10",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wait 2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait2",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wait 3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait3",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wait 4')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait4",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wait 5')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait5",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wait 6')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait6",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wait 7')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait7",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wait 8')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait8",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Wait 9')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait9",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 15
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GetSetMetadata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Single generic dataset used to get and set all database metadata.",
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "_ProcFwk"
				},
				"annotations": [
					"procfwk"
				],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SupportDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FrameworkFunctions')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Interact with the Azure Functions App used as middle ware when making requests to Worker pipelines. Authentication done at the Function App level.",
				"annotations": [
					"procfwk"
				],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('FrameworkFunctions_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Keys",
							"type": "LinkedServiceReference"
						},
						"secretName": "FrameworkFunctionsKey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Keys')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Keys')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to Key Vault for all other ADF linked service credentials required to run the processing framework.",
				"annotations": [
					"procfwk"
				],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Keys_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SupportDatabase')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection between ADF and processing framework metadata SQLDB.",
				"annotations": [
					"procfwk"
				],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Keys",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('SupportDatabase_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Keys')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/procfwkforsynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('procfwkforsynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/procfwkforsynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('procfwkforsynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		}
	]
}