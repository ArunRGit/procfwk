{
	"name": "04-Infant",
	"properties": {
		"description": "ADF.procfwk infant pipeline used to check when the processing pipeline called by the Child completes and passes the resulting status back to the metadata database.",
		"activities": [
			{
				"name": "Execute Pipeline",
				"description": "The lowest level executor with the metadata framework to call existing processing pipelines within Data Factory. The function called will block processing and wait for an outcome.",
				"type": "AzureFunctionActivity",
				"dependsOn": [
					{
						"activity": "Log Pipeline Running",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get Pipeline Params",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get SPN Details",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"functionName": "ExecutePipeline",
					"method": "POST",
					"body": {
						"value": "@concat('\n{\n\t\"tenantId\": \"',pipeline().parameters.TenantId,'\",\n\t\"applicationId\": \"',activity('Get SPN Details').output.firstRow.Id,'\",\n\t\"authenticationKey\": \"',activity('Get SPN Details').output.firstRow.Secret,'\",\n\t\"subscriptionId\": \"',pipeline().parameters.SubscriptionId,'\",\n\t\"resourceGroup\": \"',item().ResourceGroupName,'\",\n\t\"factoryName\": \"',item().DataFactoryName,'\",\n\t\"pipelineName\": \"',item().PipelineName,'\"',activity('Get Pipeline Params').output.firstRow.Params,'\n}')",
						"type": "Expression"
					}
				},
				"linkedServiceName": {
					"referenceName": "FrameworkFunctions",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Get Pipeline Params",
				"description": "Returns any parameters from metadata required for the processing pipeline being called. The output can be an empty string if no parameters are required.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[GetPipelineParameters]",
						"storedProcedureParameters": {
							"PipelineId": {
								"type": "Int32",
								"value": {
									"value": "@item().PipelineId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Log Pipeline Running",
				"description": "Sets the current pipeline with a status of running within the current execution database table.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[procfwk].[SetLogPipelineRunning]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@item().PipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Get SPN Details",
				"description": "Return the SPN ID and Secret for the processing pipeline being executed. Called at this level as each pipeline can have a different SPN.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[GetServicePrincipal]",
						"storedProcedureParameters": {
							"DataFactory": {
								"type": "String",
								"value": {
									"value": "@item().DataFactoryName",
									"type": "Expression"
								}
							},
							"PipelineName": {
								"type": "String",
								"value": {
									"value": "@item().PipelineName",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Log Activity Failure 1",
				"description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Execute Pipeline",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[procfwk].[SetLogActivityFailed]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@item().PipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"CallingActivity": {
							"value": "ExecutePipeline",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Set Run Id",
				"description": "Provide the actual ADF run ID back to the current execution table for long term logging and alignment between the metadata other Azure monitoring tools.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Execute Pipeline",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[procfwk].[SetLogPipelineRunId]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@item().PipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"RunId": {
							"value": {
								"value": "@activity('Execute Pipeline').output.RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Check For Alerts",
				"description": "Checks the properties tables and if any recipients in the database require alerts sending for the current pipeline ID.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set Run Id",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set Pipeline Result",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[CheckForEmailAlerts]",
						"storedProcedureParameters": {
							"PipelineId": {
								"type": "Int32",
								"value": {
									"value": "@item().PipelineId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "Send Alerts",
				"description": "True = alerts need sending.\nFalse = do nothing.",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Check For Alerts",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@activity('Check For Alerts').output.firstRow.SendAlerts",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Get Email Parts",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[procfwk].[GetEmailAlertParts]",
									"storedProcedureParameters": {
										"PipelineId": {
											"type": "Int32",
											"value": {
												"value": "@item().PipelineId",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "GetSetMetadata",
									"type": "DatasetReference"
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "Send Email",
							"type": "AzureFunctionActivity",
							"dependsOn": [
								{
									"activity": "Get Email Parts",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"functionName": "SendEmail",
								"method": "POST",
								"body": {
									"value": "@activity('Get Email Parts').output.firstRow",
									"type": "Expression"
								}
							},
							"linkedServiceName": {
								"referenceName": "FrameworkFunctions",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Wait Until Pipeline Completes",
				"description": "Loops until the Worker pipeline called completes.\n\nSimple status:\n- Running = new iteration.\n- Done = break.",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Get Wait Duration",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Execute Pipeline",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@variables('WorkerPipelineState')",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Get Pipeline Status",
							"description": "Checks the status of a given processing pipeline and provides the value for the downstream framework activities to act upon.",
							"type": "AzureFunctionActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"functionName": "CheckPipelineStatus",
								"method": "POST",
								"body": {
									"value": "@concat('\n{\n    \"tenantId\": \"',pipeline().parameters.TenantId,'\",\n    \"applicationId\": \"',pipeline().parameters.applicationId,'\",\n    \"authenticationKey\": \"',pipeline().parameters.authenticationKey,'\",\n    \"subscriptionId\": \"',pipeline().parameters.subscriptionId,'\",\n    \"resourceGroup\": \"',pipeline().parameters.resourceGroup,'\",\n    \"factoryName\": \"',pipeline().parameters.factoryName,'\",\n    \"pipelineName\": \"',pipeline().parameters.pipelineName,'\",\n    \"runId\": \"',pipeline().parameters.runId,'\"\n}')",
									"type": "Expression"
								}
							},
							"linkedServiceName": {
								"referenceName": "FrameworkFunctions",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Wait If Running",
							"description": "True = Do nothing.\nFalse = Wait, before the next iteration.",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Set Worker State",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@variables('WorkerPipelineState')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Wait for Pipeline",
										"description": "The processing pipeline is still running so Wait before checking its status again.",
										"type": "Wait",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": {
												"value": "@activity('Get Wait Duration').output.firstRow.PropertyValue",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "Set Last Check DateTime",
							"description": "Update the current execution table with a date time from when the Worker pipeline status was last checked as part of the Until iterations.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Get Pipeline Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogPipelineLastStatusCheck]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Log Activity Failure 2",
							"description": "Report to the current execution table that the framework pipeline activity has failed. This failure is outside of the scope of the framework and is probably related to a wider platform problem.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Get Pipeline Status",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogActivityFailed]",
								"storedProcedureParameters": {
									"CallingActivity": {
										"value": "GetPipelineStatus",
										"type": "String"
									},
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Set Worker State",
							"description": "Set the bool state of the Worker pipeline to be used by the Until and If expressions. True = Complete, False = Running.",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Pipeline Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "WorkerPipelineState",
								"value": {
									"value": "@equals('Done',activity('Get Pipeline Status').output.SimpleStatus)",
									"type": "Expression"
								}
							}
						}
					],
					"timeout": "7.00:00:00"
				}
			},
			{
				"name": "Set Pipeline Result",
				"description": "Receives the outcome from the function execution for a given processing pipeline and updates the current execution table with different pipelines status values depending on the result (case).",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "Wait Until Pipeline Completes",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@activity('Get Pipeline Status').output.Status",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "Succeeded",
							"activities": [
								{
									"name": "Pipeline Status Succeeded",
									"description": "Updates the current execution table with a pipeline status of success if the function outcome is succeeded.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[procfwk].[SetLogPipelineSuccess]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						},
						{
							"value": "Failed",
							"activities": [
								{
									"name": "Pipeline Status Failed",
									"description": "Updates the current execution table with a pipeline status of failed if the function outcome is failed. Also blocks pipelines in the downstream execution stage.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[procfwk].[SetLogPipelineFailed]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RunId": {
												"value": {
													"value": "@activity('Get Pipeline Status').output.RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get Error Details",
									"description": "Get the activity error details for the run ID of the worker pipeline called. Returns an array of all errors.",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "GetActivityErrors",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\n    \"tenantId\": \"',pipeline().parameters.TenantId,'\",\n    \"applicationId\": \"',pipeline().parameters.applicationId,'\",\n    \"authenticationKey\": \"',pipeline().parameters.authenticationKey,'\",\n    \"subscriptionId\": \"',pipeline().parameters.subscriptionId,'\",\n    \"resourceGroup\": \"',pipeline().parameters.resourceGroup,'\",\n    \"factoryName\": \"',pipeline().parameters.factoryName,'\",\n    \"pipelineName\": \"',pipeline().parameters.pipelineName,'\",\n    \"runId\": \"',pipeline().parameters.runId,'\"\n}')",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "FrameworkFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Log Error Details",
									"description": "Parses pipeline error details and persists them to the metadata database error log table.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Error Details",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[procfwk].[SetErrorLogDetails]",
										"storedProcedureParameters": {
											"JsonErrorDetails": {
												"value": {
													"value": "@string(activity('Get Error Details').output)",
													"type": "Expression"
												},
												"type": "String"
											},
											"LocalExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						},
						{
							"value": "Cancelled",
							"activities": [
								{
									"name": "Pipeline Status Cancelled",
									"description": "Updates the current execution table with a pipeline status of cancelled if the function outcome is cancelled.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[procfwk].[SetLogPipelineCancelled]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Pipeline Status Unknown",
							"description": "Updates the current execution table with a pipeline status of unknown if the function returns an unexpected outcome.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogPipelineUnknown]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Get Wait Duration",
				"description": "Return wait duration in seconds from database properties table to be used during each Until iteration when the Worker pipeline is still running.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[GetPropertyValue]",
						"storedProcedureParameters": {
							"PropertyName": {
								"type": "String",
								"value": "PipelineStatusCheckDuration"
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			}
		],
		"parameters": {
			"tenantId": {
				"type": "string"
			},
			"applicationId": {
				"type": "string"
			},
			"authenticationKey": {
				"type": "string"
			},
			"subscriptionId": {
				"type": "string"
			},
			"resourceGroup": {
				"type": "string"
			},
			"factoryName": {
				"type": "string"
			},
			"pipelineName": {
				"type": "string"
			},
			"runId": {
				"type": "string"
			},
			"executionId": {
				"type": "string"
			},
			"stageId": {
				"type": "int"
			},
			"pipelineId": {
				"type": "int"
			}
		},
		"variables": {
			"WorkerPipelineState": {
				"type": "Boolean"
			}
		},
		"folder": {
			"name": "_ProcFwk"
		},
		"annotations": [
			"ADF.procfwk",
			"Infant"
		]
	}
}