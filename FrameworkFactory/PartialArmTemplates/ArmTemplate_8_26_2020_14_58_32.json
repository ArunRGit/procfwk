{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "FrameworkFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/02-Parent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ADF.procfwk parent pipeline used to bootstrap the orchestration framework in perform the first level ForEach calls in sequence for the metadata stages.",
				"activities": [
					{
						"name": "Get Stages",
						"description": "Returns a distinct list of execution stages within the framework metadata.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execution Wrapper",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[procfwk].[GetStages]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"type": "Guid",
										"value": {
											"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Stages",
						"description": "Top level ForEach to sequentially call all processing stages within the framework metadata. Items for iteration passed from the Get Stages lookup activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Stages",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Tenant Id",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Subscription Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Stages').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Stage Executor",
									"description": "Call to the framework generic child pipeline for a given execution stage.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Log Stage Preparing",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "03-Child",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"StageId": {
												"value": "@item().StageId",
												"type": "Expression"
											},
											"ExecutionId": {
												"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
												"type": "Expression"
											},
											"TenantId": {
												"value": "@activity('Get Tenant Id').output.firstRow.PropertyValue",
												"type": "Expression"
											},
											"SubscriptionId": {
												"value": "@activity('Get Subscription Id').output.firstRow.PropertyValue",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Stage Preparing",
									"description": "Update the current execution table flagging all pipelines within the stage as preparing.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Check and Update Blockers",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[SetLogStagePreparing]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StageId": {
												"value": {
													"value": "@item().StageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Check and Update Blockers",
									"description": "Used to double check and stop the next execution stage if failures and blockers have be incurred. This also depends on the failure handling property value which defines the stored procedure behaviour.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[CheckForBlockedPipelines]",
										"storedProcedureParameters": {
											"StageId": {
												"value": {
													"value": "@item().StageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Execution Wrapper",
						"description": "Wrapper to reset and restart processing or create a completely new execution instance of the framework metadata.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clean Up Previous Run",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[procfwk].[ExecutionWrapper]",
								"storedProcedureParameters": {
									"CallingDataFactory": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Check Outcome and Update Logs",
						"description": "After a successful execution run the current execution metadata is moved to the long term logging table by this stored procedure call. Otherwise an error will be raised.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Stages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[procfwk].[UpdateExecutionLog]",
							"storedProcedureParameters": {
								"PerformErrorCheck": {
									"value": {
										"value": "@bool(1)",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SupportDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Tenant Id",
						"description": "Returning the Azure Tenant Id from the metadata properties table.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Metadata Integrity Checks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[procfwk].[GetPropertyValue]",
								"storedProcedureParameters": {
									"PropertyName": {
										"type": "String",
										"value": "TenantId"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference"
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get Subscription Id",
						"description": "Returning the Azure Subscription Id from the metadata properties table.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Metadata Integrity Checks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[procfwk].[GetPropertyValue]",
								"storedProcedureParameters": {
									"PropertyName": {
										"type": "String",
										"value": "SubscriptionId"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Metadata Integrity Checks",
						"description": "Performs a series of checks on all metadata held in the framework SQLDB. This is intended to raise errors before an execution run even starts.",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Precursor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[procfwk].[CheckMetadataIntegrity]",
								"storedProcedureParameters": {
									"DebugMode": {
										"type": "Boolean",
										"value": "false"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Clean Up Previous Run",
						"description": "Handle Worker pipelines that are reported as Running when the parent pipeline is called again. Get what the actual status of those pipelines is.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Metadata Integrity Checks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata Integrity Checks').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Get SPN Details",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[procfwk].[GetServicePrincipal]",
											"storedProcedureParameters": {
												"DataFactory": {
													"type": "String",
													"value": {
														"value": "@item().DataFactoryName",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@item().PipelineName",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "GetSetMetadata",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "Log Pipeline Checking",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[SetLogPipelineChecking]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@item().LocalExecutionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@item().PipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@item().StageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get Pipeline Status",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Get SPN Details",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Log Pipeline Checking",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "CheckPipelineStatus",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\n    \"tenantId\": \"',item().TenantId,'\",\n    \"applicationId\": \"',activity('Get SPN Details').output.firstRow.Id,'\",\n    \"authenticationKey\": \"',activity('Get SPN Details').output.firstRow.Secret,'\",\n    \"subscriptionId\": \"',item().SubscriptionId,'\",\n    \"resourceGroup\": \"',item().ResourceGroupName,'\",\n    \"factoryName\": \"',item().DataFactoryName,'\",\n    \"pipelineName\": \"',item().PipelineName,'\",\n    \"runId\": \"',item().AdfPipelineRunId,'\"\n}')",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "FrameworkFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Set Pipeline Status",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Get Pipeline Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@activity('Get Pipeline Status').output.Status",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Failed",
												"activities": [
													{
														"name": "Pipeline Status Failed",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[procfwk].[SetLogPipelineFailed]",
															"storedProcedureParameters": {
																"ExecutionId": {
																	"value": {
																		"value": "@item().LocalExecutionId",
																		"type": "Expression"
																	},
																	"type": "Guid"
																},
																"PipelineId": {
																	"value": {
																		"value": "@item().PipelineId",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"RunId": {
																	"value": null,
																	"type": "Guid"
																},
																"StageId": {
																	"value": {
																		"value": "@item().StageId",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "SupportDatabase",
															"type": "LinkedServiceReference"
														}
													}
												]
											},
											{
												"value": "Succeeded",
												"activities": [
													{
														"name": "Pipeline Status Succeeded",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[procfwk].[SetLogPipelineSuccess]",
															"storedProcedureParameters": {
																"ExecutionId": {
																	"value": {
																		"value": "@item().LocalExecutionId",
																		"type": "Expression"
																	},
																	"type": "Guid"
																},
																"PipelineId": {
																	"value": {
																		"value": "@item().PipelineId",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"StageId": {
																	"value": {
																		"value": "@item().StageId",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "SupportDatabase",
															"type": "LinkedServiceReference"
														}
													}
												]
											},
											{
												"value": "Queued",
												"activities": [
													{
														"name": "Pipeline Status Queued - Running",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[procfwk].[SetLogPipelineRunning]",
															"storedProcedureParameters": {
																"ExecutionId": {
																	"value": {
																		"value": "@item().LocalExecutionId",
																		"type": "Expression"
																	},
																	"type": "Guid"
																},
																"PipelineId": {
																	"value": {
																		"value": "@item().PipelineId",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"StageId": {
																	"value": {
																		"value": "@item().StageId",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "SupportDatabase",
															"type": "LinkedServiceReference"
														}
													}
												]
											},
											{
												"value": "InProgress",
												"activities": [
													{
														"name": "Pipeline Status InProgress - Running",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[procfwk].[SetLogPipelineRunning]",
															"storedProcedureParameters": {
																"ExecutionId": {
																	"value": {
																		"value": "@item().LocalExecutionId",
																		"type": "Expression"
																	},
																	"type": "Guid"
																},
																"PipelineId": {
																	"value": {
																		"value": "@item().PipelineId",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"StageId": {
																	"value": {
																		"value": "@item().StageId",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "SupportDatabase",
															"type": "LinkedServiceReference"
														}
													}
												]
											},
											{
												"value": "Cancelled",
												"activities": [
													{
														"name": "Pipeline Status Cancelled",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[procfwk].[SetLogPipelineCancelled]",
															"storedProcedureParameters": {
																"ExecutionId": {
																	"value": {
																		"value": "@item().LocalExecutionId",
																		"type": "Expression"
																	},
																	"type": "Guid"
																},
																"PipelineId": {
																	"value": {
																		"value": "@item().PipelineId",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"StageId": {
																	"value": {
																		"value": "@item().StageId",
																		"type": "Expression"
																	},
																	"type": "Int32"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "SupportDatabase",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Pipeline Status Unknown",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[procfwk].[SetLogPipelineUnknown]",
													"storedProcedureParameters": {
														"ExecutionId": {
															"value": {
																"value": "@item().LocalExecutionId",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"PipelineId": {
															"value": {
																"value": "@item().PipelineId",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"StageId": {
															"value": {
																"value": "@item().StageId",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "SupportDatabase",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Set Last Check DateTime",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Pipeline Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[SetLogPipelineLastStatusCheck]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@item().LocalExecutionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@item().PipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@item().StageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Execute Precursor",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[procfwk].[ExecutePrecursorProcedure]"
						},
						"linkedServiceName": {
							"referenceName": "SupportDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "_ProcFwk"
				},
				"annotations": [
					"ADF.procfwk"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/03-Child')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/03-Child')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ADF.procfwk child pipeline used to execute Worker pipelines within a given execution stage. This pipeline will be called once for each stage, then execute all Workers in parallel.",
				"activities": [
					{
						"name": "Get Pipelines",
						"description": "Returns all pipelines from the metadata to be executed within a given processing stage.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[procfwk].[GetPipelinesInStage]",
								"storedProcedureParameters": {
									"StageId": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.StageId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetSetMetadata",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Pipelines",
						"description": "Second level ForEach to run in parallel all pipelines within the stage. Items for iteration passed from the Get Pipelines lookup activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Pipelines",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Pipelines').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "Execute Pipeline",
									"description": "The lowest level executor with the metadata framework to call existing processing pipelines within Data Factory. The function called will block processing and wait for an outcome.",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "Log Pipeline Running",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Get Pipeline Params",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Get SPN Details",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "ExecutePipeline",
										"method": "POST",
										"body": {
											"value": "@concat('\n{\n\t\"tenantId\": \"',pipeline().parameters.TenantId,'\",\n\t\"applicationId\": \"',activity('Get SPN Details').output.firstRow.Id,'\",\n\t\"authenticationKey\": \"',activity('Get SPN Details').output.firstRow.Secret,'\",\n\t\"subscriptionId\": \"',pipeline().parameters.SubscriptionId,'\",\n\t\"resourceGroup\": \"',item().ResourceGroupName,'\",\n\t\"factoryName\": \"',item().DataFactoryName,'\",\n\t\"pipelineName\": \"',item().PipelineName,'\"',activity('Get Pipeline Params').output.firstRow.Params,'\n}')",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "FrameworkFunctions",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get Pipeline Params",
									"description": "Returns any parameters from metadata required for the processing pipeline being called. The output can be an empty string if no parameters are required.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[procfwk].[GetPipelineParameters]",
											"storedProcedureParameters": {
												"PipelineId": {
													"type": "Int32",
													"value": {
														"value": "@item().PipelineId",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "GetSetMetadata",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "Log Pipeline Running",
									"description": "Sets the current pipeline with a status of running within the current execution database table.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[SetLogPipelineRunning]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.ExecutionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@item().PipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.StageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get SPN Details",
									"description": "Return the SPN ID and Secret for the processing pipeline being executed. Called at this level as each pipeline can have a different SPN.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[procfwk].[GetServicePrincipal]",
											"storedProcedureParameters": {
												"DataFactory": {
													"type": "String",
													"value": {
														"value": "@item().DataFactoryName",
														"type": "Expression"
													}
												},
												"PipelineName": {
													"type": "String",
													"value": {
														"value": "@item().PipelineName",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "GetSetMetadata",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "Log Activity Failure",
									"description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Pipeline",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[SetLogActivityFailed]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.ExecutionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@item().PipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.StageId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"CallingActivity": {
												"value": "ExecutePipeline",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Running Pipeline Handler",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Pipeline",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "04-Infant",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"tenantId": {
												"value": "@pipeline().parameters.TenantId",
												"type": "Expression"
											},
											"applicationId": {
												"value": "@activity('Get SPN Details').output.firstRow.Id",
												"type": "Expression"
											},
											"authenticationKey": {
												"value": "@activity('Get SPN Details').output.firstRow.Secret",
												"type": "Expression"
											},
											"subscriptionId": {
												"value": "@pipeline().parameters.SubscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@item().ResourceGroupName",
												"type": "Expression"
											},
											"factoryName": {
												"value": "@item().DataFactoryName",
												"type": "Expression"
											},
											"pipelineName": {
												"value": "@item().PipelineName",
												"type": "Expression"
											},
											"runId": {
												"value": "@activity('Execute Pipeline').output.RunId",
												"type": "Expression"
											},
											"executionId": {
												"value": "@pipeline().parameters.ExecutionId",
												"type": "Expression"
											},
											"stageId": {
												"value": "@pipeline().parameters.StageId",
												"type": "Expression"
											},
											"pipelineId": {
												"value": "@item().PipelineId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Set Run Id",
									"description": "Provide the actual ADF run ID back to the current execution table for long term logging and alignment between the metadata other Azure monitoring tools.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Pipeline",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[procfwk].[SetLogPipelineRunId]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.ExecutionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@item().PipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RunId": {
												"value": {
													"value": "@activity('Execute Pipeline').output.RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.StageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Check For Alerts",
									"description": "Checks the properties tables and if any recipients in the database require alerts sending for the current pipeline ID.",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set Run Id",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Running Pipeline Handler",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[procfwk].[CheckForEmailAlerts]",
											"storedProcedureParameters": {
												"PipelineId": {
													"type": "Int32",
													"value": {
														"value": "@item().PipelineId",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "GetSetMetadata",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Send Alerts",
									"description": "True = alerts need sending.\nFalse = do nothing.",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check For Alerts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Check For Alerts').output.firstRow.SendAlerts",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Get Email Parts",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderStoredProcedureName": "[[procfwk].[GetEmailAlertParts]",
														"storedProcedureParameters": {
															"PipelineId": {
																"type": "Int32",
																"value": {
																	"value": "@item().PipelineId",
																	"type": "Expression"
																}
															}
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "GetSetMetadata",
														"type": "DatasetReference"
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Send Email",
												"type": "AzureFunctionActivity",
												"dependsOn": [
													{
														"activity": "Get Email Parts",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"functionName": "SendEmail",
													"method": "POST",
													"body": {
														"value": "@activity('Get Email Parts').output.firstRow",
														"type": "Expression"
													}
												},
												"linkedServiceName": {
													"referenceName": "FrameworkFunctions",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"StageId": {
						"type": "int"
					},
					"ExecutionId": {
						"type": "string"
					},
					"TenantId": {
						"type": "string"
					},
					"SubscriptionId": {
						"type": "string"
					}
				},
				"variables": {
					"FunctionBody": {
						"type": "String"
					}
				},
				"folder": {
					"name": "_ProcFwk"
				},
				"annotations": [
					"ADF.procfwk"
				]
			},
			"dependsOn": []
		}
	]
}